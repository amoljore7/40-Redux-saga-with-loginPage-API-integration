{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport { LOGIN, LOGOUT, LOGIN_SUCCESS, LOGOUT_SUCCESS, CLEAR_MESSAGES, CURRENT_USER, SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\nexport function* userLogin({\n  payload\n}) {\n  yield put({\n    type: CLEAR_MESSAGES\n  });\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const user = yield Axios.post(\"/api/token/\", payload).then(res => res.data);\n    localStorage.setItem(\"accessToken\", user.access);\n    localStorage.setItem(\"refreshToken\", user.refresh);\n    const userData = {\n      user: payload.username\n    };\n    yield put({\n      type: LOGIN_SUCCESS,\n      payload: userData\n    });\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    let msg = {\n      id: 1,\n      text: \"Login successful\"\n    };\n    yield put({\n      type: SUCCESS_MESSAGE,\n      payload: msg\n    });\n  } catch (e) {\n    let msg = {\n      id: 1,\n      text: \"No active account found with the given credentials\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* userLogout() {\n  yield put({\n    type: CLEAR_MESSAGES\n  });\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\"\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({\n    type: LOGOUT_SUCCESS\n  });\n  yield put({\n    type: SUCCESS_MESSAGE,\n    payload: successMsg\n  });\n}\nexport function* currentUser({\n  payload\n}) {\n  yield put({\n    type: LOGIN_SUCCESS,\n    payload: payload\n  });\n}\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}","map":{"version":3,"sources":["/home/amol/Desktop/HRA/src/sagas/auth.sagas.js"],"names":["put","takeLatest","SET_LOADING","LOGIN","LOGOUT","LOGIN_SUCCESS","LOGOUT_SUCCESS","CLEAR_MESSAGES","CURRENT_USER","SUCCESS_MESSAGE","ERROR_MESSAGE","Axios","userLogin","payload","type","user","post","then","res","data","localStorage","setItem","access","refresh","userData","username","JSON","stringify","msg","id","text","e","userLogout","successMsg","removeItem","currentUser","authActionWatcher"],"mappings":"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","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\nimport { SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport {\n  LOGIN,\n  LOGOUT,\n  LOGIN_SUCCESS,\n  LOGOUT_SUCCESS,\n  CLEAR_MESSAGES,\n  CURRENT_USER,\n  SUCCESS_MESSAGE,\n  ERROR_MESSAGE,\n} from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\n\nexport function* userLogin({ payload }) {\n  yield put({ type: CLEAR_MESSAGES });\n  yield put({ type: SET_LOADING });\n\n  try {\n    const user = yield Axios.post(\"/api/token/\", payload).then((res) => res.data);\n    localStorage.setItem(\"accessToken\", user.access);\n    localStorage.setItem(\"refreshToken\", user.refresh);\n    const userData = {\n      user: payload.username,\n    };\n    yield put({ type: LOGIN_SUCCESS, payload: userData });\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    let msg = {\n      id: 1,\n      text: \"Login successful\",\n    };\n    yield put({ type: SUCCESS_MESSAGE, payload: msg });\n  } catch (e) {\n    let msg = {\n      id: 1,\n      text: \"No active account found with the given credentials\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\nexport function* userLogout() {\n  yield put({ type: CLEAR_MESSAGES });\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\",\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({ type: LOGOUT_SUCCESS });\n  yield put({ type: SUCCESS_MESSAGE, payload: successMsg });\n}\nexport function* currentUser({ payload }) {\n  yield put({ type: LOGIN_SUCCESS, payload: payload });\n}\n\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}\n"]},"metadata":{},"sourceType":"module"}