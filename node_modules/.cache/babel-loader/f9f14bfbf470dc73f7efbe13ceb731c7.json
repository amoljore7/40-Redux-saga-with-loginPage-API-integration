{"ast":null,"code":"import Axios from 'axios';\nexport const setAuthToken = token => {\n  if (token) {\n    // Apply to every request\n    Axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  } else {\n    // Delete auth header\n    delete Axios.defaults.headers.common['Authorization'];\n  }\n};\nexport const axiosResponseInterceptor = () => {\n  Axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const refreshToken = localStorage.refreshToken;\n      return Axios.post('/api/token/refresh/', {\n        \"refresh\": refreshToken\n      }).then(res => {\n        if (res.status === 200) {\n          localStorage.setItem('accessToken', res.data.access);\n          Axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access;\n          error.response.config.headers['Authorization'] = 'Bearer ' + res.data.access;\n          return Axios(originalRequest);\n        }\n      });\n    }\n\n    return Promise.reject(error);\n  });\n};","map":{"version":3,"sources":["/home/amol/Desktop/ems-iam-ui-iam-ui-login/src/components/utils/setToken.js"],"names":["Axios","setAuthToken","token","defaults","headers","common","axiosResponseInterceptor","interceptors","response","use","error","originalRequest","config","status","_retry","refreshToken","localStorage","post","then","res","setItem","data","access","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACnC,MAAIA,KAAJ,EAAW;AACT;AACAF,IAAAA,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYH,KAA7D;AACD,GAHD,MAGO;AACL;AACA,WAAOF,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMC,wBAAwB,GAAG,MAAM;AAC3CN,EAAAA,KAAK,CAACO,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAiCD,QAAD,IAAc;AAC3C,WAAOA,QAAP;AACF,GAFD,EAEG,UAAUE,KAAV,EAAiB;AACjB,UAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AAEA,QAAIF,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACG,MAAtD,EAA8D;AAE1DH,MAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,YAAMC,YAAY,GAAGC,YAAY,CAACD,YAAlC;AACA,aAAOf,KAAK,CAACiB,IAAN,CAAW,qBAAX,EACH;AACI,mBAAWF;AADf,OADG,EAIFG,IAJE,CAIGC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACN,MAAJ,KAAe,GAAnB,EAAwB;AACrBG,UAAAA,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoCD,GAAG,CAACE,IAAJ,CAASC,MAA7C;AACAtB,UAAAA,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYc,GAAG,CAACE,IAAJ,CAASC,MAAtE;AACAZ,UAAAA,KAAK,CAACF,QAAN,CAAeI,MAAf,CAAsBR,OAAtB,CAA8B,eAA9B,IAAiD,YAAYe,GAAG,CAACE,IAAJ,CAASC,MAAtE;AACA,iBAAOtB,KAAK,CAACW,eAAD,CAAZ;AACF;AACJ,OAXE,CAAP;AAYH;;AACD,WAAOY,OAAO,CAACC,MAAR,CAAed,KAAf,CAAP;AACF,GAvBD;AAwBF,CAzBM","sourcesContent":["import Axios from 'axios';\n\nexport const setAuthToken = token => {\n  if (token) {\n    // Apply to every request\n    Axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  } else {\n    // Delete auth header\n    delete Axios.defaults.headers.common['Authorization'];\n  }\n};\n\nexport const axiosResponseInterceptor = () => {\n   Axios.interceptors.response.use((response) => {\n      return response\n   }, function (error) {\n      const originalRequest = error.config;\n   \n      if (error.response.status === 401 && !originalRequest._retry) {\n   \n          originalRequest._retry = true;\n          const refreshToken = localStorage.refreshToken;\n          return Axios.post('/api/token/refresh/',\n              {\n                  \"refresh\": refreshToken\n              })\n              .then(res => {\n                  if (res.status === 200) {\n                     localStorage.setItem('accessToken', res.data.access);\n                     Axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access;\n                     error.response.config.headers['Authorization'] = 'Bearer ' + res.data.access;\n                     return Axios(originalRequest);\n                  }\n              })\n      }\n      return Promise.reject(error);\n   });\n}"]},"metadata":{},"sourceType":"module"}