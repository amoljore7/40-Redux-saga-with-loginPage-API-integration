{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_EMPLOYEE_SUCCESS, GET_SINGLE_EMPLOYEE_FAIL, SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport { LOGIN, LOGOUT, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, CLEAR_MESSAGES, CURRENT_USER } from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\n\nfunction* userLogin({\n  payload\n}) {\n  yield put({\n    type: CLEAR_MESSAGES\n  });\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const user = yield Axios.post(\"/api/token/\", payload).then(res => {\n      console.log(res);\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n    console.log(user);\n    let msg;\n\n    if (user) {\n      localStorage.setItem('accessToken', user.access);\n      localStorage.setItem('refreshToken', user.refresh);\n      const userData = {\n        user: payload.username\n      };\n      yield put({\n        type: LOGIN_SUCCESS,\n        payload: userData\n      });\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      msg = {\n        id: 1,\n        text: \"Login successful\"\n      };\n      yield put({\n        type: ADD_EMPLOYEE_SUCCESS,\n        payload: msg\n      });\n    } else {\n      msg = {\n        id: 1,\n        text: \"No active account found with the given credentials\"\n      };\n      yield put({\n        type: GET_SINGLE_EMPLOYEE_FAIL,\n        payload: msg\n      });\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\n\nfunction* userLogout() {\n  yield put({\n    type: CLEAR_MESSAGES\n  }); // yield put({ type: SET_LOADING });\n  // try {\n  //    const user = yield fetch(`https://`).then((response) => response.json());\n  //    yield put({ type: LOGOUT_SUCCESS, payload: user });\n  // } catch (e) {\n  //    yield put({ type: LOGOUT_FAIL, payload: e.message });\n  // }\n  // yield put({ type: SET_LOADING });\n\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\"\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({\n    type: LOGOUT_SUCCESS\n  });\n  yield put({\n    type: ADD_EMPLOYEE_SUCCESS,\n    payload: successMsg\n  });\n}\n\nfunction* currentUser({\n  payload\n}) {\n  yield put({\n    type: LOGIN_SUCCESS,\n    payload: payload\n  });\n}\n\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}","map":{"version":3,"sources":["/home/amol/Desktop/IAM/ems-iam-ui/src/sagas/auth.sagas.js"],"names":["put","takeLatest","ADD_EMPLOYEE_SUCCESS","GET_SINGLE_EMPLOYEE_FAIL","SET_LOADING","LOGIN","LOGOUT","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","CLEAR_MESSAGES","CURRENT_USER","Axios","userLogin","payload","type","user","post","then","res","console","log","data","catch","err","msg","localStorage","setItem","access","refresh","userData","username","JSON","stringify","id","text","e","userLogout","successMsg","removeItem","currentUser","authActionWatcher"],"mappings":"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","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\nimport {\n  ADD_EMPLOYEE_SUCCESS,\n  GET_SINGLE_EMPLOYEE_FAIL,\n  SET_LOADING\n} from \"../actions/employee/employeeTypes\";\nimport {\n  LOGIN,\n  LOGOUT,\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n  LOGOUT_SUCCESS,\n  CLEAR_MESSAGES,\n  CURRENT_USER\n} from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\n\nfunction* userLogin({ payload }) {\n   yield put({ type: CLEAR_MESSAGES });\n   yield put({ type: SET_LOADING });\n\n   try {\n      \n      const user = yield Axios.post( \"/api/token/\",payload)\n                              .then((res) => {\n                                 console.log(res);\n                                 return res.data;\n                              })\n                              .catch(err => {\n                                 console.log(err);\n                              });\n      console.log(user);\n      let msg;\n      if (user) {\n         localStorage.setItem('accessToken', user.access);\n         localStorage.setItem('refreshToken', user.refresh);\n         const userData = {\n            user:payload.username\n         }\n         yield put({ type: LOGIN_SUCCESS, payload: userData });\n         localStorage.setItem(\"user\", JSON.stringify(userData));\n         msg = {\n            id: 1,\n            text: \"Login successful\"\n         };\n         yield put({ type: ADD_EMPLOYEE_SUCCESS, payload: msg });\n      }else{\n         msg = {\n            id: 1,\n            text: \"No active account found with the given credentials\"\n         };\n         yield put({ type: GET_SINGLE_EMPLOYEE_FAIL, payload: msg });\n      }\n\n      \n   } catch (e) {\n      console.log(e);\n   }\n   yield put({ type: SET_LOADING });\n}\nfunction* userLogout() {\n  yield put({ type: CLEAR_MESSAGES });\n  // yield put({ type: SET_LOADING });\n  // try {\n  //    const user = yield fetch(`https://`).then((response) => response.json());\n\n  //    yield put({ type: LOGOUT_SUCCESS, payload: user });\n  // } catch (e) {\n  //    yield put({ type: LOGOUT_FAIL, payload: e.message });\n  // }\n  // yield put({ type: SET_LOADING });\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\",\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({ type: LOGOUT_SUCCESS });\n  yield put({ type: ADD_EMPLOYEE_SUCCESS, payload: successMsg });\n}\nfunction* currentUser({ payload }) {\n   yield put({ type: LOGIN_SUCCESS,  payload: payload });\n}\n\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}\n"]},"metadata":{},"sourceType":"module"}