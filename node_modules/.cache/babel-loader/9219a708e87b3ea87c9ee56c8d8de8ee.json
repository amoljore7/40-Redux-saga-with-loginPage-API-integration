{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport { LOGIN, LOGOUT, LOGIN_SUCCESS, LOGOUT_SUCCESS, CLEAR_MESSAGES, CURRENT_USER, SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\nexport function* userLogin({\n  payload\n}) {\n  yield put({\n    type: CLEAR_MESSAGES\n  });\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const user = yield Axios.post(\"/api/token/\", payload).then(res => {\n      return res.data;\n    });\n\n    if (user) {} else {\n      let msg = {\n        id: 1,\n        text: \"No active account found with the given credentials\"\n      };\n      yield put({\n        type: ERROR_MESSAGE,\n        payload: msg\n      });\n    }\n  } catch (e) {}\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* userLogout() {\n  yield put({\n    type: CLEAR_MESSAGES\n  });\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\"\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({\n    type: LOGOUT_SUCCESS\n  });\n  yield put({\n    type: SUCCESS_MESSAGE,\n    payload: successMsg\n  });\n}\nexport function* currentUser({\n  payload\n}) {\n  yield put({\n    type: LOGIN_SUCCESS,\n    payload: payload\n  });\n}\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}","map":{"version":3,"sources":["/home/amol/Desktop/HRA/src/sagas/auth.sagas.js"],"names":["put","takeLatest","SET_LOADING","LOGIN","LOGOUT","LOGIN_SUCCESS","LOGOUT_SUCCESS","CLEAR_MESSAGES","CURRENT_USER","SUCCESS_MESSAGE","ERROR_MESSAGE","Axios","userLogin","payload","type","user","post","then","res","data","msg","id","text","e","userLogout","successMsg","localStorage","removeItem","currentUser","authActionWatcher"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SACEC,KADF,EAEEC,MAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,YANF,EAOEC,eAPF,EAQEC,aARF,QASO,2BATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AACtC,QAAMb,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAT;AACA,QAAMP,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAT;;AAEA,MAAI;AACF,UAAMa,IAAI,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAW,aAAX,EAA0BH,OAA1B,EAChBI,IADgB,CACVC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAX;AACD,KAHgB,CAAnB;;AAMA,QAAIJ,IAAJ,EAAU,CAET,CAFD,MAEO;AACL,UAAIK,GAAG,GAAG;AACRC,QAAAA,EAAE,EAAE,CADI;AAERC,QAAAA,IAAI,EAAE;AAFE,OAAV;AAIA,YAAMtB,GAAG,CAAC;AAAEc,QAAAA,IAAI,EAAEJ,aAAR;AAAuBG,QAAAA,OAAO,EAAEO;AAAhC,OAAD,CAAT;AACD;AACF,GAhBD,CAgBE,OAAOG,CAAP,EAAU,CAAE;;AACd,QAAMvB,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAT;AACD;AACD,OAAO,UAAUsB,UAAV,GAAuB;AAC5B,QAAMxB,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAT;AACA,QAAMkB,UAAU,GAAG;AACjBJ,IAAAA,EAAE,EAAE,CADa;AAEjBC,IAAAA,IAAI,EAAE;AAFW,GAAnB;AAIAI,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACA,QAAM3B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAT;AACA,QAAMN,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEL,eAAR;AAAyBI,IAAAA,OAAO,EAAEY;AAAlC,GAAD,CAAT;AACD;AACD,OAAO,UAAUG,WAAV,CAAsB;AAAEf,EAAAA;AAAF,CAAtB,EAAmC;AACxC,QAAMb,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAET,aAAR;AAAuBQ,IAAAA,OAAO,EAAEA;AAAhC,GAAD,CAAT;AACD;AAED,OAAO,UAAUgB,iBAAV,GAA8B;AACnC,QAAM5B,UAAU,CAACE,KAAD,EAAQS,SAAR,CAAhB;AACA,QAAMX,UAAU,CAACG,MAAD,EAASoB,UAAT,CAAhB;AACA,QAAMvB,UAAU,CAACO,YAAD,EAAeoB,WAAf,CAAhB;AACD","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\nimport { SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport {\n  LOGIN,\n  LOGOUT,\n  LOGIN_SUCCESS,\n  LOGOUT_SUCCESS,\n  CLEAR_MESSAGES,\n  CURRENT_USER,\n  SUCCESS_MESSAGE,\n  ERROR_MESSAGE,\n} from \"../actions/auth/authTypes\";\nimport Axios from \"axios\";\n\nexport function* userLogin({ payload }) {\n  yield put({ type: CLEAR_MESSAGES });\n  yield put({ type: SET_LOADING });\n\n  try {\n    const user = yield Axios.post(\"/api/token/\", payload)\n      .then((res) => {\n        return res.data;\n      })\n     \n  \n    if (user) {\n     \n    } else {\n      let msg = {\n        id: 1,\n        text: \"No active account found with the given credentials\",\n      };\n      yield put({ type: ERROR_MESSAGE, payload: msg });\n    }\n  } catch (e) {}\n  yield put({ type: SET_LOADING });\n}\nexport function* userLogout() {\n  yield put({ type: CLEAR_MESSAGES });\n  const successMsg = {\n    id: 1,\n    text: \"Logout successful\",\n  };\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  yield put({ type: LOGOUT_SUCCESS });\n  yield put({ type: SUCCESS_MESSAGE, payload: successMsg });\n}\nexport function* currentUser({ payload }) {\n  yield put({ type: LOGIN_SUCCESS, payload: payload });\n}\n\nexport function* authActionWatcher() {\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, userLogout);\n  yield takeLatest(CURRENT_USER, currentUser);\n}\n"]},"metadata":{},"sourceType":"module"}