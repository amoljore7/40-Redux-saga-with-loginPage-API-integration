{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { GET_EMPLOYEES_LIST, GET_SINGLE_EMPLOYEE, ADD_EMPLOYEE, ADD_EMPLOYEES_LIST, GET_EMPLOYEES_LIST_SUCCESS, GET_EMPLOYEES_LIST_FAIL, GET_SINGLE_EMPLOYEE_SUCCESS, GET_SINGLE_EMPLOYEE_FAIL, ADD_EMPLOYEE_SUCCESS, ADD_EMPLOYEES_LIST_SUCCESS, ADD_EMPLOYEES_LIST_FAIL, ADD_EMPLOYEE_FAIL, SET_LOADING, EDIT_EMPLOYEE, EDIT_EMPLOYEE_SUCCESS, EDIT_EMPLOYEE_FAIL, GET_PROJECTS, GET_LOCATIONS, GET_LOCATIONS_SUCCESS, GET_LOCATIONS_FAIL, GET_PROJECTS_SUCCESS, GET_PROJECTS_FAIL, GET_MANAGER_LIST_SUCCESS } from \"../actions/employee/employeeTypes\";\nimport Axios from \"axios\";\nimport { SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\nexport function* getEmployeeList({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const employeeList = yield Axios.get(`/employees/`, payload).then(res => res.data);\n\n    if (payload.forManager) {\n      yield put({\n        type: GET_MANAGER_LIST_SUCCESS,\n        payload: employeeList\n      });\n    } else {\n      yield put({\n        type: GET_EMPLOYEES_LIST_SUCCESS,\n        payload: employeeList\n      });\n    }\n  } catch (err) {\n    yield put({\n      type: GET_EMPLOYEES_LIST_FAIL,\n      payload: err.response.data\n    });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* employeeActionWatcher() {\n  yield takeLatest(GET_EMPLOYEES_LIST, getEmployeeList);\n}","map":{"version":3,"sources":["/home/amol/Desktop/MACE/src/sagas/employee.sagas.js"],"names":["put","takeLatest","GET_EMPLOYEES_LIST","GET_SINGLE_EMPLOYEE","ADD_EMPLOYEE","ADD_EMPLOYEES_LIST","GET_EMPLOYEES_LIST_SUCCESS","GET_EMPLOYEES_LIST_FAIL","GET_SINGLE_EMPLOYEE_SUCCESS","GET_SINGLE_EMPLOYEE_FAIL","ADD_EMPLOYEE_SUCCESS","ADD_EMPLOYEES_LIST_SUCCESS","ADD_EMPLOYEES_LIST_FAIL","ADD_EMPLOYEE_FAIL","SET_LOADING","EDIT_EMPLOYEE","EDIT_EMPLOYEE_SUCCESS","EDIT_EMPLOYEE_FAIL","GET_PROJECTS","GET_LOCATIONS","GET_LOCATIONS_SUCCESS","GET_LOCATIONS_FAIL","GET_PROJECTS_SUCCESS","GET_PROJECTS_FAIL","GET_MANAGER_LIST_SUCCESS","Axios","SUCCESS_MESSAGE","ERROR_MESSAGE","getEmployeeList","payload","type","employeeList","get","then","res","data","forManager","err","response","msg","id","text","employeeActionWatcher"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,kBAJF,EAKEC,0BALF,EAMEC,uBANF,EAOEC,2BAPF,EAQEC,wBARF,EASEC,oBATF,EAUEC,0BAVF,EAWEC,uBAXF,EAYEC,iBAZF,EAaEC,WAbF,EAcEC,aAdF,EAeEC,qBAfF,EAgBEC,kBAhBF,EAiBEC,YAjBF,EAkBEC,aAlBF,EAmBEC,qBAnBF,EAoBEC,kBApBF,EAqBEC,oBArBF,EAsBEC,iBAtBF,EAuBEC,wBAvBF,QAwBO,mCAxBP;AAyBA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,2BAA/C;AAEA,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAuC;AAC5C,QAAM7B,GAAG,CAAC;AAAE8B,IAAAA,IAAI,EAAEhB;AAAR,GAAD,CAAT;;AACA,MAAI;AACF,UAAMiB,YAAY,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,aAAX,EAAyBH,OAAzB,EAAkCI,IAAlC,CACxBC,GAAD,IAASA,GAAG,CAACC,IADY,CAA3B;;AAGA,QAAIN,OAAO,CAACO,UAAZ,EAAwB;AACtB,YAAMpC,GAAG,CAAC;AAAE8B,QAAAA,IAAI,EAAEN,wBAAR;AAAkCK,QAAAA,OAAO,EAAEE;AAA3C,OAAD,CAAT;AACD,KAFD,MAEO;AACL,YAAM/B,GAAG,CAAC;AAAE8B,QAAAA,IAAI,EAAExB,0BAAR;AAAoCuB,QAAAA,OAAO,EAAEE;AAA7C,OAAD,CAAT;AACD;AACF,GATD,CASE,OAAOM,GAAP,EAAY;AACZ,UAAMrC,GAAG,CAAC;AAAE8B,MAAAA,IAAI,EAAEvB,uBAAR;AAAiCsB,MAAAA,OAAO,EAAEQ,GAAG,CAACC,QAAJ,CAAaH;AAAvD,KAAD,CAAT;AACA,QAAII,GAAG,GAAG;AACRC,MAAAA,EAAE,EAAE,CADI;AAERC,MAAAA,IAAI,EAAE;AAFE,KAAV;AAIA,UAAMzC,GAAG,CAAC;AAAE8B,MAAAA,IAAI,EAAEH,aAAR;AAAuBE,MAAAA,OAAO,EAAEU;AAAhC,KAAD,CAAT;AACD;;AACD,QAAMvC,GAAG,CAAC;AAAE8B,IAAAA,IAAI,EAAEhB;AAAR,GAAD,CAAT;AACD;AAID,OAAO,UAAU4B,qBAAV,GAAkC;AACvC,QAAMzC,UAAU,CAACC,kBAAD,EAAqB0B,eAArB,CAAhB;AACD","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\nimport {\n  GET_EMPLOYEES_LIST,\n  GET_SINGLE_EMPLOYEE,\n  ADD_EMPLOYEE,\n  ADD_EMPLOYEES_LIST,\n  GET_EMPLOYEES_LIST_SUCCESS,\n  GET_EMPLOYEES_LIST_FAIL,\n  GET_SINGLE_EMPLOYEE_SUCCESS,\n  GET_SINGLE_EMPLOYEE_FAIL,\n  ADD_EMPLOYEE_SUCCESS,\n  ADD_EMPLOYEES_LIST_SUCCESS,\n  ADD_EMPLOYEES_LIST_FAIL,\n  ADD_EMPLOYEE_FAIL,\n  SET_LOADING,\n  EDIT_EMPLOYEE,\n  EDIT_EMPLOYEE_SUCCESS,\n  EDIT_EMPLOYEE_FAIL,\n  GET_PROJECTS,\n  GET_LOCATIONS,\n  GET_LOCATIONS_SUCCESS,\n  GET_LOCATIONS_FAIL,\n  GET_PROJECTS_SUCCESS,\n  GET_PROJECTS_FAIL,\n  GET_MANAGER_LIST_SUCCESS,\n} from \"../actions/employee/employeeTypes\";\nimport Axios from \"axios\";\nimport { SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\n\nexport function* getEmployeeList({ payload }) {\n  yield put({ type: SET_LOADING });\n  try {\n    const employeeList = yield Axios.get(`/employees/`, payload).then(\n      (res) => res.data\n    );\n    if (payload.forManager) {\n      yield put({ type: GET_MANAGER_LIST_SUCCESS, payload: employeeList });\n    } else {\n      yield put({ type: GET_EMPLOYEES_LIST_SUCCESS, payload: employeeList });\n    }\n  } catch (err) {\n    yield put({ type: GET_EMPLOYEES_LIST_FAIL, payload: err.response.data });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\n\n\nexport function* employeeActionWatcher() {\n  yield takeLatest(GET_EMPLOYEES_LIST, getEmployeeList);\n}\n"]},"metadata":{},"sourceType":"module"}