{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { GET_EMPLOYEES_LIST, GET_SINGLE_EMPLOYEE, GET_EMPLOYEES_LIST_SUCCESS, GET_EMPLOYEES_LIST_FAIL, GET_SINGLE_EMPLOYEE_SUCCESS, GET_SINGLE_EMPLOYEE_FAIL, SET_LOADING } from \"../actions/employee/employeeTypes\";\nimport Axios from \"axios\";\nimport { SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\nexport function* getEmployeeList({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const employeeList = yield Axios.get(`/employees/`, payload).then(res => res.data);\n\n    if (payload.forManager) {\n      yield put({\n        type: GET_MANAGER_LIST_SUCCESS,\n        payload: employeeList\n      });\n    } else {\n      yield put({\n        type: GET_EMPLOYEES_LIST_SUCCESS,\n        payload: employeeList\n      });\n    }\n  } catch (err) {\n    yield put({\n      type: GET_EMPLOYEES_LIST_FAIL,\n      payload: err.response.data\n    });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* getEmployeeDetails({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const employeeDetails = yield Axios.get(`/employees/${payload}`).then(res => res.data);\n    yield put({\n      type: GET_SINGLE_EMPLOYEE_SUCCESS,\n      payload: employeeDetails\n    });\n  } catch (err) {\n    yield put({\n      type: GET_SINGLE_EMPLOYEE_FAIL,\n      payload: err.response.data\n    });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* addEmployee({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const employee = yield Axios.post(\"/employees/\", payload).then(res => res.data);\n    let msg = {\n      id: 1,\n      text: \"Employee Added successfully.\"\n    };\n    yield put({\n      type: ADD_EMPLOYEE_SUCCESS,\n      payload: employee\n    });\n    yield put({\n      type: SUCCESS_MESSAGE,\n      payload: msg\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_EMPLOYEE_FAIL,\n      payload: err.response.data\n    });\n    let msg = {\n      id: 1,\n      text: \"fill Presonal & Business Details currectly\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* addEmployeeList({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const employeeList = yield Axios.post(`/employees/bulkupload/${payload.filename}`, payload.formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(res => res.data);\n    let msg = {\n      id: 1,\n      text: \"List Uploaded successfully.\"\n    };\n    yield put({\n      type: ADD_EMPLOYEES_LIST_SUCCESS,\n      payload: employeeList\n    });\n    yield put({\n      type: SUCCESS_MESSAGE,\n      payload: msg\n    });\n  } catch (err) {\n    const errData = [];\n    err.response.data && err.response.data.map(val => {\n      for (let key in val.Description) {\n        errData.push({\n          no: val.Record_Number + 1,\n          row: key,\n          msg: val.Description[key].join()\n        });\n      }\n\n      return val;\n    });\n    yield put({\n      type: ADD_EMPLOYEES_LIST_FAIL,\n      payload: errData\n    });\n    let msg = {\n      id: 1,\n      text: \"Failed to upload data\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* editEmployee({\n  payload\n}) {\n  yield put({\n    type: SET_LOADING\n  });\n  const id = payload.ID;\n  payload.ID = undefined;\n\n  try {\n    const employee = yield Axios.put(`/employees/${id}`, payload).then(res => res.data);\n    let msg = {\n      id: 1,\n      text: \"Updated successfully.\"\n    };\n    yield put({\n      type: EDIT_EMPLOYEE_SUCCESS,\n      payload: employee\n    });\n    yield put({\n      type: SUCCESS_MESSAGE,\n      payload: msg\n    });\n  } catch (err) {\n    yield put({\n      type: EDIT_EMPLOYEE_FAIL,\n      payload: err.response.data\n    });\n    let msg = {\n      id: 1,\n      text: \"Failed to update fill Presonal & Business Details currectly\"\n    };\n    yield put({\n      type: ERROR_MESSAGE,\n      payload: msg\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* getLocations() {\n  try {\n    const locations = yield Axios.get(`/locations`).then(res => res.data);\n    yield put({\n      type: GET_LOCATIONS_SUCCESS,\n      payload: locations\n    });\n  } catch (err) {\n    yield put({\n      type: GET_LOCATIONS_FAIL,\n      payload: err.response.data\n    });\n  }\n}\nexport function* getProjects() {\n  yield put({\n    type: SET_LOADING\n  });\n\n  try {\n    const projects = yield Axios.get(`/projects`).then(res => res.data);\n    yield put({\n      type: GET_PROJECTS_SUCCESS,\n      payload: projects\n    });\n  } catch (err) {\n    yield put({\n      type: GET_PROJECTS_FAIL,\n      payload: err.response.data\n    });\n  }\n\n  yield put({\n    type: SET_LOADING\n  });\n}\nexport function* employeeActionWatcher() {\n  yield takeLatest(GET_EMPLOYEES_LIST, getEmployeeList);\n  yield takeLatest(GET_SINGLE_EMPLOYEE, getEmployeeDetails);\n  yield takeLatest(ADD_EMPLOYEE, addEmployee);\n  yield takeLatest(ADD_EMPLOYEES_LIST, addEmployeeList);\n  yield takeLatest(EDIT_EMPLOYEE, editEmployee);\n  yield takeLatest(GET_LOCATIONS, getLocations);\n  yield takeLatest(GET_PROJECTS, getProjects);\n}","map":{"version":3,"sources":["/home/amol/Desktop/MACE/src/sagas/employee.sagas.js"],"names":["put","takeLatest","GET_EMPLOYEES_LIST","GET_SINGLE_EMPLOYEE","GET_EMPLOYEES_LIST_SUCCESS","GET_EMPLOYEES_LIST_FAIL","GET_SINGLE_EMPLOYEE_SUCCESS","GET_SINGLE_EMPLOYEE_FAIL","SET_LOADING","Axios","SUCCESS_MESSAGE","ERROR_MESSAGE","getEmployeeList","payload","type","employeeList","get","then","res","data","forManager","GET_MANAGER_LIST_SUCCESS","err","response","msg","id","text","getEmployeeDetails","employeeDetails","addEmployee","employee","post","ADD_EMPLOYEE_SUCCESS","ADD_EMPLOYEE_FAIL","addEmployeeList","filename","formData","headers","ADD_EMPLOYEES_LIST_SUCCESS","errData","map","val","key","Description","push","no","Record_Number","row","join","ADD_EMPLOYEES_LIST_FAIL","editEmployee","ID","undefined","EDIT_EMPLOYEE_SUCCESS","EDIT_EMPLOYEE_FAIL","getLocations","locations","GET_LOCATIONS_SUCCESS","GET_LOCATIONS_FAIL","getProjects","projects","GET_PROJECTS_SUCCESS","GET_PROJECTS_FAIL","employeeActionWatcher","ADD_EMPLOYEE","ADD_EMPLOYEES_LIST","EDIT_EMPLOYEE","GET_LOCATIONS","GET_PROJECTS"],"mappings":"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","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\nimport {\n  GET_EMPLOYEES_LIST,\n  GET_SINGLE_EMPLOYEE,\n  GET_EMPLOYEES_LIST_SUCCESS,\n  GET_EMPLOYEES_LIST_FAIL,\n  GET_SINGLE_EMPLOYEE_SUCCESS,\n  GET_SINGLE_EMPLOYEE_FAIL,\n  SET_LOADING,\n\n} from \"../actions/employee/employeeTypes\";\nimport Axios from \"axios\";\nimport { SUCCESS_MESSAGE, ERROR_MESSAGE } from \"../actions/auth/authTypes\";\n\nexport function* getEmployeeList({ payload }) {\n  yield put({ type: SET_LOADING });\n  try {\n    const employeeList = yield Axios.get(`/employees/`, payload).then(\n      (res) => res.data\n    );\n    if (payload.forManager) {\n      yield put({ type: GET_MANAGER_LIST_SUCCESS, payload: employeeList });\n    } else {\n      yield put({ type: GET_EMPLOYEES_LIST_SUCCESS, payload: employeeList });\n    }\n  } catch (err) {\n    yield put({ type: GET_EMPLOYEES_LIST_FAIL, payload: err.response.data });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* getEmployeeDetails({ payload }) {\n  yield put({ type: SET_LOADING });\n  try {\n    const employeeDetails = yield Axios.get(`/employees/${payload}`).then(\n      (res) => res.data\n    );\n    yield put({ type: GET_SINGLE_EMPLOYEE_SUCCESS, payload: employeeDetails });\n  } catch (err) {\n    yield put({ type: GET_SINGLE_EMPLOYEE_FAIL, payload: err.response.data });\n    let msg = {\n      id: 1,\n      text: \"Failed to process request\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* addEmployee({ payload }) {\n  yield put({ type: SET_LOADING });\n  try {\n    const employee = yield Axios.post(\"/employees/\", payload).then(\n      (res) => res.data\n    );\n    let msg = {\n      id: 1,\n      text: \"Employee Added successfully.\",\n    };\n    yield put({ type: ADD_EMPLOYEE_SUCCESS, payload: employee });\n    yield put({ type: SUCCESS_MESSAGE, payload: msg });\n  } catch (err) {\n    yield put({ type: ADD_EMPLOYEE_FAIL, payload: err.response.data });\n    let msg = {\n      id: 1,\n      text: \"fill Presonal & Business Details currectly\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* addEmployeeList({ payload }) {\n  yield put({ type: SET_LOADING });\n  try {\n    const employeeList = yield Axios.post(\n      `/employees/bulkupload/${payload.filename}`,\n      payload.formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    ).then((res) => res.data);\n    let msg = {\n      id: 1,\n      text: \"List Uploaded successfully.\",\n    };\n    yield put({ type: ADD_EMPLOYEES_LIST_SUCCESS, payload: employeeList });\n    yield put({ type: SUCCESS_MESSAGE, payload: msg });\n  } catch (err) {\n    const errData = [];\n    err.response.data &&\n      err.response.data.map((val) => {\n        for (let key in val.Description) {\n          errData.push({\n            no: val.Record_Number + 1,\n            row: key,\n            msg: val.Description[key].join(),\n          });\n        }\n        return val;\n      });\n    yield put({ type: ADD_EMPLOYEES_LIST_FAIL, payload: errData });\n    let msg = {\n      id: 1,\n      text: \"Failed to upload data\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* editEmployee({ payload }) {\n  yield put({ type: SET_LOADING });\n  const id = payload.ID;\n  payload.ID = undefined;\n  try {\n    const employee = yield Axios.put(`/employees/${id}`, payload).then(\n      (res) => res.data\n    );\n    let msg = {\n      id: 1,\n      text: \"Updated successfully.\",\n    };\n    yield put({ type: EDIT_EMPLOYEE_SUCCESS, payload: employee });\n    yield put({ type: SUCCESS_MESSAGE, payload: msg });\n  } catch (err) {\n    yield put({ type: EDIT_EMPLOYEE_FAIL, payload: err.response.data });\n    let msg = {\n      id: 1,\n      text: \"Failed to update fill Presonal & Business Details currectly\",\n    };\n    yield put({ type: ERROR_MESSAGE, payload: msg });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* getLocations() {\n  try {\n    const locations = yield Axios.get(`/locations`).then((res) => res.data);\n    yield put({ type: GET_LOCATIONS_SUCCESS, payload: locations });\n  } catch (err) {\n    yield put({ type: GET_LOCATIONS_FAIL, payload: err.response.data });\n  }\n}\n\nexport function* getProjects() {\n  yield put({ type: SET_LOADING });\n  try {\n    const projects = yield Axios.get(`/projects`).then((res) => res.data);\n    yield put({ type: GET_PROJECTS_SUCCESS, payload: projects });\n  } catch (err) {\n    yield put({ type: GET_PROJECTS_FAIL, payload: err.response.data });\n  }\n  yield put({ type: SET_LOADING });\n}\n\nexport function* employeeActionWatcher() {\n  yield takeLatest(GET_EMPLOYEES_LIST, getEmployeeList);\n  yield takeLatest(GET_SINGLE_EMPLOYEE, getEmployeeDetails);\n  yield takeLatest(ADD_EMPLOYEE, addEmployee);\n  yield takeLatest(ADD_EMPLOYEES_LIST, addEmployeeList);\n  yield takeLatest(EDIT_EMPLOYEE, editEmployee);\n  yield takeLatest(GET_LOCATIONS, getLocations);\n  yield takeLatest(GET_PROJECTS, getProjects);\n}\n"]},"metadata":{},"sourceType":"module"}