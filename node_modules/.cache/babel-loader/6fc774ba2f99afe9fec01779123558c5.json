{"ast":null,"code":"var _jsxFileName = \"/home/amol/Desktop/HRA/src/components/pages/bulkupload/BulkUpload.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Upload, Card, Button, Table } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { addEmployeeList } from \"../../../actions/employee/employeeActions\";\nimport PropTypes from \"prop-types\";\nimport sample1 from \"../../../constant/sample1.xlsx\";\nimport sample2 from \"../../../constant/sample2.csv\";\n\nconst BulkUpload = props => {\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    setErrors(props.employee.errors);\n  }, [props.employee.errors]);\n  useEffect(() => {\n    if (!props.employee.loading) {\n      setErrors([]);\n    }\n  }, []);\n\n  const uploadFile = file => {\n    setFile(file);\n  };\n\n  const onFinish = values => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const empData = {\n      filename: file.name,\n      formData: formData\n    };\n    props.addEmployeeList(empData);\n  };\n\n  const columns = [{\n    title: \"Row No\",\n    dataIndex: \"no\"\n  }, {\n    title: \"Field\",\n    dataIndex: \"row\"\n  }, {\n    title: \"Message\",\n    dataIndex: \"msg\"\n  }];\n  const uploadprops = {\n    onRemove: file => {\n      setFile(null);\n    },\n    beforeUpload: file => {\n      setFile(file);\n      return false;\n    },\n    file,\n    multiple: false\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: \"Upload Employee List\",\n    bordered: true,\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Select file to upload\",\n    rules: [{\n      required: true,\n      message: \"File is required\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Upload.Dragger, Object.assign({}, uploadprops, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-drag-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InboxOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-hint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"Support for a single or bulk upload.\"))), /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Upload\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: sample1,\n    download: \"sample_xlsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Download sample xlsx\"), \"/\", /*#__PURE__*/React.createElement(\"a\", {\n    href: sample2,\n    download: \"sample.csv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"Download sample csv\")))), errors.length > 0 && /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: errors,\n    rowKey: no => no,\n    size: \"small\",\n    bordered: true,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })));\n};\n\nBulkUpload.propTypes = {\n  addEmployeeList: PropTypes.func.isRequired,\n  employee: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  employee: state.employee\n});\n\nexport default connect(mapStateToProps, {\n  addEmployeeList\n})(BulkUpload);","map":{"version":3,"sources":["/home/amol/Desktop/HRA/src/components/pages/bulkupload/BulkUpload.js"],"names":["React","useState","useEffect","Form","Upload","Card","Button","Table","InboxOutlined","connect","addEmployeeList","PropTypes","sample1","sample2","BulkUpload","props","file","setFile","errors","setErrors","employee","loading","uploadFile","onFinish","values","formData","FormData","append","empData","filename","name","columns","title","dataIndex","uploadprops","onRemove","beforeUpload","multiple","required","message","length","no","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Upload, Card, Button, Table } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { addEmployeeList } from \"../../../actions/employee/employeeActions\";\nimport PropTypes from \"prop-types\";\nimport sample1 from \"../../../constant/sample1.xlsx\";\nimport sample2 from \"../../../constant/sample2.csv\";\n\nconst BulkUpload = (props) => {\n  const [file, setFile] = useState(null);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    setErrors(props.employee.errors);\n  }, [props.employee.errors]);\n\n  useEffect(() => {\n     if (!props.employee.loading) {\n        setErrors([]);\n     }\n  }, []);\n\n  const uploadFile = (file) => {\n    setFile(file);\n  };\n\n  const onFinish = (values) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const empData = {\n      filename: file.name,\n      formData: formData,\n    };\n    props.addEmployeeList(empData);\n  };\n  const columns = [\n    {\n      title: \"Row No\",\n      dataIndex: \"no\",\n    },\n    {\n      title: \"Field\",\n      dataIndex: \"row\",\n    },\n    {\n      title: \"Message\",\n      dataIndex: \"msg\",\n    },\n  ];\n  const uploadprops = {\n   onRemove: file => {\n      setFile(null);\n   },\n   beforeUpload: file => {\n      setFile(file);\n     return false;\n   },\n   file,\n   multiple: false\n };\n  return (\n    <div>\n      <Card title=\"Upload Employee List\" bordered={true} className=\"my-3\">\n        <Form layout=\"vertical\" onFinish={onFinish}>\n          <Form.Item\n            label=\"Select file to upload\"\n            rules={[{ required: true, message: \"File is required\" }]}\n          >\n            <Upload.Dragger {...uploadprops}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n              <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n            </Upload.Dragger>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block>\n              Upload\n            </Button>\n            <div className=\"m-1\">\n              <a href={sample1} download=\"sample_xlsx\">\n                Download sample xlsx\n              </a>\n              /\n              <a href={sample2} download=\"sample.csv\">\n                Download sample csv\n              </a>\n            </div>\n          </Form.Item>\n        </Form>\n        {errors.length > 0 && (\n          <Table\n            columns={columns}\n            dataSource={errors}\n            rowKey={(no) => no}\n            size=\"small\"\n            bordered\n            pagination={false}\n          />\n        )}\n      </Card>\n    </div>\n  );\n};\nBulkUpload.propTypes = {\n  addEmployeeList: PropTypes.func.isRequired,\n  employee: PropTypes.object\n};\nconst mapStateToProps = (state) => ({\n  employee: state.employee,\n});\nexport default connect(mapStateToProps, { addEmployeeList })(BulkUpload);\n"]},"metadata":{},"sourceType":"module"}